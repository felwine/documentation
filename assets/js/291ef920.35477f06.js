"use strict";(self.webpackChunk_felwine_documentation=self.webpackChunk_felwine_documentation||[]).push([[8907],{15680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>f});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},90154:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=t(58168),o=(t(96540),t(15680));const i={sidebar_position:2},a="Terms, definitions and components",c={unversionedId:"concepts/components",id:"version-1.0/concepts/components",title:"Terms, definitions and components",description:"Inputs",source:"@site/versioned_docs/version-1.0/concepts/components.mdx",sourceDirName:"concepts",slug:"/concepts/components",permalink:"/documentation/docs/concepts/components",draft:!1,editUrl:"https://github.com/felwine/generator-felwine/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.0/concepts/components.mdx",tags:[],version:"1.0",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Philosophy",permalink:"/documentation/docs/concepts/philosophy"},next:{title:"Guides",permalink:"/documentation/docs/category/guides"}},s={},p=[{value:"Inputs",id:"inputs",level:2},{value:"Input Library",id:"input-library",level:2},{value:"Validation schema",id:"validation-schema",level:2}],l={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.yg)(u,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"terms-definitions-and-components"},"Terms, definitions and components"),(0,o.yg)("h2",{id:"inputs"},"Inputs"),(0,o.yg)("p",null,"Inputs are reusable components that follow the ",(0,o.yg)("inlineCode",{parentName:"p"},"Felwine input")," api."),(0,o.yg)("h2",{id:"input-library"},"Input Library"),(0,o.yg)("p",null,"An input librariy is a function that provides an input based on a unique key."),(0,o.yg)("h2",{id:"validation-schema"},"Validation schema"),(0,o.yg)("p",null,"A validation schema is an object that tells whether an input value is valid or not."))}d.isMDXComponent=!0}}]);